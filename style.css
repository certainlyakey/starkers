/*!
Theme Name:   Starkers
Theme URI:    http://example.com/
Description:  A theme for a site based on Starkers
Version:      0.1
Author:       Aleksandr Beliaev
*/.u-screenreader-text{position:absolute;overflow:hidden;clip:rect(0 0 0 0);height:1px;width:1px;margin:-1px;padding:0;border:0;white-space:nowrap}.js-hidden{display:none}.u-inner-layer{position:relative;z-index:1}.u-nowrap{white-space:nowrap}.u-wp-widget-hiddentitle .widgettitle{display:none}

/*! normalize.css v3.0.0 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}dd,dl,figure,h1,h2,h3,h4,h5,h6,li,ol,p,ul{margin:0;padding:0}h1,h2,h3,h4,h5,h6{font-weight:400;font-size:100%}ul li{list-style:none}a:focus{outline:none}html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}body{background-color:gray;font:15px/23px Corbel,Lucida Grande,Verdana,sans-serif}a{color:#00f;text-decoration:none}.c-bright-menu{text-align:center;margin:0 auto}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
